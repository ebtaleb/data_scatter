; ModuleID = 'obs.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.test = type { i32, i32 }

@access_array = global [4 x i32] [i32 0, i32 1, i32 0, i32 1], align 16
@address_array = common global [2 x i32*] zeroinitializer, align 16
@access_counter = common global i32 0, align 4

; Function Attrs: nounwind uwtable
define i32 @rand_a_b(i32 %M, i32 %N) #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 %M, i32* %1, align 4
  store i32 %N, i32* %2, align 4
  %3 = load i32, i32* %1, align 4
  %4 = call i32 @rand() #2
  %5 = load i32, i32* %2, align 4
  %6 = load i32, i32* %1, align 4
  %7 = sub nsw i32 %5, %6
  %8 = add nsw i32 %7, 1
  %9 = sdiv i32 2147483647, %8
  %10 = add nsw i32 %9, 1
  %11 = sdiv i32 %4, %10
  %12 = add nsw i32 %3, %11
  ret i32 %12
}

; Function Attrs: nounwind
declare i32 @rand() #1

; Function Attrs: nounwind uwtable
define i32* @access() #0 {
  %nb_elem = alloca i32, align 4
  %id1 = alloca i32, align 4
  %id2 = alloca i32, align 4
  %t = alloca i32, align 4
  %ptr = alloca i32*, align 8
  store i32 2, i32* %nb_elem, align 4
  %1 = load i32, i32* %nb_elem, align 4
  %2 = sub nsw i32 %1, 1
  %3 = call i32 @rand_a_b(i32 0, i32 %2)
  store i32 %3, i32* %id2, align 4
  %4 = load i32, i32* %nb_elem, align 4
  %5 = sub nsw i32 %4, 1
  %6 = call i32 @rand_a_b(i32 0, i32 %5)
  store i32 %6, i32* %id1, align 4
  %7 = load i32, i32* %id1, align 4
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i32*, i32** getelementptr inbounds ([2 x i32*], [2 x i32*]* @address_array, i32 0, i32 0), i64 %8
  %10 = load i32*, i32** %9, align 8
  %11 = load i32, i32* %10, align 4
  store i32 %11, i32* %t, align 4
  %12 = load i32, i32* %id2, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i32*, i32** getelementptr inbounds ([2 x i32*], [2 x i32*]* @address_array, i32 0, i32 0), i64 %13
  %15 = load i32*, i32** %14, align 8
  %16 = load i32, i32* %15, align 4
  %17 = load i32, i32* %id1, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i32*, i32** getelementptr inbounds ([2 x i32*], [2 x i32*]* @address_array, i32 0, i32 0), i64 %18
  %20 = load i32*, i32** %19, align 8
  store i32 %16, i32* %20, align 4
  %21 = load i32, i32* %t, align 4
  %22 = load i32, i32* %id2, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i32*, i32** getelementptr inbounds ([2 x i32*], [2 x i32*]* @address_array, i32 0, i32 0), i64 %23
  %25 = load i32*, i32** %24, align 8
  store i32 %21, i32* %25, align 4
  %26 = load i32, i32* %id1, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i32*, i32** getelementptr inbounds ([2 x i32*], [2 x i32*]* @address_array, i32 0, i32 0), i64 %27
  %29 = load i32*, i32** %28, align 8
  store i32* %29, i32** %ptr, align 8
  %30 = load i32, i32* %id2, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i32*, i32** getelementptr inbounds ([2 x i32*], [2 x i32*]* @address_array, i32 0, i32 0), i64 %31
  %33 = load i32*, i32** %32, align 8
  %34 = load i32, i32* %id1, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i32*, i32** getelementptr inbounds ([2 x i32*], [2 x i32*]* @address_array, i32 0, i32 0), i64 %35
  store i32* %33, i32** %36, align 8
  %37 = load i32*, i32** %ptr, align 8
  %38 = load i32, i32* %id2, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i32*, i32** getelementptr inbounds ([2 x i32*], [2 x i32*]* @address_array, i32 0, i32 0), i64 %39
  store i32* %37, i32** %40, align 8
  %41 = load i32, i32* @access_counter, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* @access_counter, align 4
  %43 = load i32, i32* @access_counter, align 4
  %44 = sub nsw i32 %43, 1
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i32, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @access_array, i32 0, i32 0), i64 %45
  %47 = load i32, i32* %46, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i32*, i32** getelementptr inbounds ([2 x i32*], [2 x i32*]* @address_array, i32 0, i32 0), i64 %48
  %50 = load i32*, i32** %49, align 8
  ret i32* %50
}

; Function Attrs: nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %t = alloca %struct.test, align 4
  %c = alloca i32, align 4
  store i32 0, i32* %1
  %2 = call i64 @time(i64* null) #2
  %3 = trunc i64 %2 to i32
  call void @srand(i32 %3) #2
  store i32 0, i32* @access_counter, align 4
  %4 = getelementptr inbounds %struct.test, %struct.test* %t, i32 0, i32 1
  store i32* %4, i32** getelementptr inbounds ([2 x i32*], [2 x i32*]* @address_array, i32 0, i64 1), align 8
  %5 = getelementptr inbounds %struct.test, %struct.test* %t, i32 0, i32 0
  store i32* %5, i32** getelementptr inbounds ([2 x i32*], [2 x i32*]* @address_array, i32 0, i32 0), align 8
  %6 = call i32* @access()
  store i32 10, i32* %6, align 4
  %7 = call i32* @access()
  store i32 20, i32* %7, align 4
  %8 = call i32* @access()
  %9 = load i32, i32* %8, align 4
  store i32 %9, i32* %c, align 4
  %10 = load i32, i32* %c, align 4
  %11 = call i32* @access()
  %12 = load i32, i32* %11, align 4
  %13 = add nsw i32 %10, %12
  ret i32 %13
}

; Function Attrs: nounwind
declare void @srand(i32) #1

; Function Attrs: nounwind
declare i64 @time(i64*) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.ident = !{!0}

!0 = !{!"Ubuntu clang version 3.7.0-2ubuntu1 (tags/RELEASE_370/final) (based on LLVM 3.7.0)"}
